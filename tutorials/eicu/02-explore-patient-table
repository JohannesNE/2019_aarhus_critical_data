{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"02-explore-patient-table","version":"0.3.2","provenance":[{"file_id":"https://github.com/MIT-LCP/2019_mlhc_workshop/blob/master/notebooks/02_explore_patients.ipynb","timestamp":1566460801352}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"NCI19_Ix7xuI"},"source":["# eICU Collaborative Research Database\n","\n","# Notebook 2: Exploring the patient table\n","\n","In this notebook we introduce the patient table, a key table in the [eICU Collaborative Research Database](http://eicu-crd.mit.edu/). The patient table contains patient demographics and admission and discharge details for hospital and ICU stays. For more detail, see: http://eicu-crd.mit.edu/eicutables/patient/"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"l_CmlcBu8Wei"},"source":["## Load libraries and connect to the data\n","\n","Run the following cells to import some libraries and then connect to the database."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"3WQsJiAj8B5L","colab":{}},"source":["# Import libraries\n","import numpy as np\n","import os\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import matplotlib.patches as patches\n","import matplotlib.path as path\n","\n","# Make pandas dataframes prettier\n","from IPython.display import display, HTML\n","\n","# Access data using Google BigQuery.\n","from google.colab import auth\n","from google.cloud import bigquery"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Ld59KZ0W9E4v"},"source":["As before, you need to first authenticate yourself by running the following cell. If you are running it for the first time, it will ask you to follow a link to log in using your Gmail account, and accept the data access requests to your profile. Once this is done, it will generate a string of verification code, which you should paste back to the cell below and press enter."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ABh4hMt288yg","colab":{}},"source":["auth.authenticate_user()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"BPoHP2a8_eni"},"source":["We'll also set the project details."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"P0fdtVMa_di9","colab":{}},"source":["project_id='aarhus-critical-2019-team'\n","os.environ[\"GOOGLE_CLOUD_PROJECT\"]=project_id"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"5bHZALFP9VN1"},"source":["# Load data from the `patient` table\n","\n","Now we can start exploring the data. We'll begin by running a simple query on the database to load all columns of the `patient` table to a Pandas DataFrame. The query is written in SQL, a common language for extracting data from databases. The structure of an SQL query is:\n","\n","```sql\n","SELECT <columns>\n","FROM <table>\n","WHERE <criteria, optional>\n","```\n","\n","`*` is a wildcard that indicates all columns"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"3cddF8qc-7h4","colab":{}},"source":["# Helper function to read data from BigQuery into a DataFrame.\n","def run_query(query):\n","    return pd.io.gbq.read_gbq(query, project_id=project_id, dialect=\"standard\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"RE-UZAPG_rHq","colab":{}},"source":["query = \"\"\"\n","SELECT *\n","FROM `physionet-data.eicu_crd_demo.patient`\n","\"\"\"\n","\n","patient = run_query(query)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"YbnkcCZxBkdK"},"source":["We have now assigned the output to our query to a variable called `patient`. Let's use the `head` method to view the first few rows of our data."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"GZph0FPDASEs","outputId":"9d3fc144-e109-4212-9476-63a2d0aef4ea","executionInfo":{"status":"ok","timestamp":1566462549939,"user_tz":-120,"elapsed":539,"user":{"displayName":"Johannes Enevoldsen","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDT17vV6lYWp7H-9Zy9wEqJlQpp6fm8oZphMlhLr8Y=s64","userId":"01220749559162578477"}},"colab":{"base_uri":"https://localhost:8080/","height":365}},"source":["# view the top few rows of the patient data\n","patient.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>patientunitstayid</th>\n","      <th>patienthealthsystemstayid</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>ethnicity</th>\n","      <th>hospitalid</th>\n","      <th>wardid</th>\n","      <th>apacheadmissiondx</th>\n","      <th>admissionheight</th>\n","      <th>hospitaladmittime24</th>\n","      <th>hospitaladmitoffset</th>\n","      <th>hospitaladmitsource</th>\n","      <th>hospitaldischargeyear</th>\n","      <th>hospitaldischargetime24</th>\n","      <th>hospitaldischargeoffset</th>\n","      <th>hospitaldischargelocation</th>\n","      <th>hospitaldischargestatus</th>\n","      <th>unittype</th>\n","      <th>unitadmittime24</th>\n","      <th>unitadmitsource</th>\n","      <th>unitvisitnumber</th>\n","      <th>unitstaytype</th>\n","      <th>admissionweight</th>\n","      <th>dischargeweight</th>\n","      <th>unitdischargetime24</th>\n","      <th>unitdischargeoffset</th>\n","      <th>unitdischargelocation</th>\n","      <th>unitdischargestatus</th>\n","      <th>uniquepid</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>210014</td>\n","      <td>182373</td>\n","      <td>Male</td>\n","      <td>45</td>\n","      <td>Caucasian</td>\n","      <td>73</td>\n","      <td>89</td>\n","      <td>Hypertension, uncontrolled (for cerebrovascula...</td>\n","      <td>178.0</td>\n","      <td>13:08:59</td>\n","      <td>-8</td>\n","      <td></td>\n","      <td>2015</td>\n","      <td>15:00:00</td>\n","      <td>4424</td>\n","      <td>Skilled Nursing Facility</td>\n","      <td>Alive</td>\n","      <td>Neuro ICU</td>\n","      <td>13:16:00</td>\n","      <td>Direct Admit</td>\n","      <td>1</td>\n","      <td>admit</td>\n","      <td>116.0</td>\n","      <td>112.7</td>\n","      <td>15:00:00</td>\n","      <td>4424</td>\n","      <td>Skilled Nursing Facility</td>\n","      <td>Alive</td>\n","      <td>002-10665</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200026</td>\n","      <td>174624</td>\n","      <td>Male</td>\n","      <td>50</td>\n","      <td>Caucasian</td>\n","      <td>71</td>\n","      <td>87</td>\n","      <td>Ablation or mapping of cardiac conduction pathway</td>\n","      <td>177.8</td>\n","      <td>10:41:00</td>\n","      <td>-311</td>\n","      <td></td>\n","      <td>2014</td>\n","      <td>18:17:00</td>\n","      <td>1585</td>\n","      <td>Home</td>\n","      <td>Alive</td>\n","      <td>Med-Surg ICU</td>\n","      <td>15:52:00</td>\n","      <td>Operating Room</td>\n","      <td>1</td>\n","      <td>admit</td>\n","      <td>106.1</td>\n","      <td>106.1</td>\n","      <td>17:40:00</td>\n","      <td>1548</td>\n","      <td>Home</td>\n","      <td>Alive</td>\n","      <td>002-10715</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>221131</td>\n","      <td>190993</td>\n","      <td>Male</td>\n","      <td>83</td>\n","      <td>Caucasian</td>\n","      <td>71</td>\n","      <td>87</td>\n","      <td>Endarterectomy, carotid</td>\n","      <td>175.3</td>\n","      <td>21:43:00</td>\n","      <td>0</td>\n","      <td></td>\n","      <td>2014</td>\n","      <td>20:00:00</td>\n","      <td>1337</td>\n","      <td>Home</td>\n","      <td>Alive</td>\n","      <td>Med-Surg ICU</td>\n","      <td>21:43:00</td>\n","      <td>Operating Room</td>\n","      <td>1</td>\n","      <td>admit</td>\n","      <td>NaN</td>\n","      <td>72.1</td>\n","      <td>17:46:00</td>\n","      <td>1203</td>\n","      <td>Home</td>\n","      <td>Alive</td>\n","      <td>002-10249</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>221215</td>\n","      <td>191054</td>\n","      <td>Male</td>\n","      <td>49</td>\n","      <td>Caucasian</td>\n","      <td>71</td>\n","      <td>87</td>\n","      <td>Infarction, acute myocardial (MI)</td>\n","      <td>185.4</td>\n","      <td>03:16:00</td>\n","      <td>-829</td>\n","      <td></td>\n","      <td>2014</td>\n","      <td>19:46:00</td>\n","      <td>1601</td>\n","      <td>Home</td>\n","      <td>Alive</td>\n","      <td>Med-Surg ICU</td>\n","      <td>17:05:00</td>\n","      <td>Emergency Department</td>\n","      <td>1</td>\n","      <td>admit</td>\n","      <td>145.3</td>\n","      <td>146.6</td>\n","      <td>19:07:00</td>\n","      <td>1562</td>\n","      <td>Home</td>\n","      <td>Alive</td>\n","      <td>002-10627</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>217835</td>\n","      <td>188445</td>\n","      <td>Male</td>\n","      <td>57</td>\n","      <td>Caucasian</td>\n","      <td>73</td>\n","      <td>92</td>\n","      <td>CABG alone, coronary artery bypass grafting</td>\n","      <td>172.7</td>\n","      <td>01:09:00</td>\n","      <td>-2917</td>\n","      <td></td>\n","      <td>2014</td>\n","      <td>17:19:00</td>\n","      <td>8133</td>\n","      <td>Home</td>\n","      <td>Alive</td>\n","      <td>CTICU</td>\n","      <td>01:46:00</td>\n","      <td>Operating Room</td>\n","      <td>1</td>\n","      <td>admit</td>\n","      <td>NaN</td>\n","      <td>80.4</td>\n","      <td>08:25:00</td>\n","      <td>4719</td>\n","      <td>Floor</td>\n","      <td>Alive</td>\n","      <td>002-10324</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   patientunitstayid  patienthealthsystemstayid  ... unitdischargestatus  uniquepid\n","0             210014                     182373  ...               Alive  002-10665\n","1             200026                     174624  ...               Alive  002-10715\n","2             221131                     190993  ...               Alive  002-10249\n","3             221215                     191054  ...               Alive  002-10627\n","4             217835                     188445  ...               Alive  002-10324\n","\n","[5 rows x 29 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"TlxaXLevC_Rz"},"source":["## Questions\n","\n","- What does `patientunitstayid` represent? (hint, see: http://eicu-crd.mit.edu/eicutables/patient/)\n","- What does `patienthealthsystemstayid` represent?\n","- What does `uniquepid` represent?"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"2rLY0WyCBzp9","outputId":"ff0b3d6b-cdbe-4fdf-eaeb-8039e1e35119","executionInfo":{"status":"ok","timestamp":1566462562988,"user_tz":-120,"elapsed":600,"user":{"displayName":"Johannes Enevoldsen","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDT17vV6lYWp7H-9Zy9wEqJlQpp6fm8oZphMlhLr8Y=s64","userId":"01220749559162578477"}},"colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# select a limited number of columns to view\n","columns = ['uniquepid', 'patientunitstayid','gender','age','unitdischargestatus']\n","patient[columns].head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>uniquepid</th>\n","      <th>patientunitstayid</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>unitdischargestatus</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>002-10665</td>\n","      <td>210014</td>\n","      <td>Male</td>\n","      <td>45</td>\n","      <td>Alive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>002-10715</td>\n","      <td>200026</td>\n","      <td>Male</td>\n","      <td>50</td>\n","      <td>Alive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>002-10249</td>\n","      <td>221131</td>\n","      <td>Male</td>\n","      <td>83</td>\n","      <td>Alive</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>002-10627</td>\n","      <td>221215</td>\n","      <td>Male</td>\n","      <td>49</td>\n","      <td>Alive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>002-10324</td>\n","      <td>217835</td>\n","      <td>Male</td>\n","      <td>57</td>\n","      <td>Alive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   uniquepid  patientunitstayid gender age unitdischargestatus\n","0  002-10665             210014   Male  45               Alive\n","1  002-10715             200026   Male  50               Alive\n","2  002-10249             221131   Male  83               Alive\n","3  002-10627             221215   Male  49               Alive\n","4  002-10324             217835   Male  57               Alive"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"FSdS2hS4EWtb"},"source":["- Try running the following query, which lists unique values in the age column. What do you notice?"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"0Aom69ftDxBN","outputId":"3c0513a6-247a-46fa-8521-5e10c4574af6","executionInfo":{"status":"ok","timestamp":1566462601117,"user_tz":-120,"elapsed":758,"user":{"displayName":"Johannes Enevoldsen","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDT17vV6lYWp7H-9Zy9wEqJlQpp6fm8oZphMlhLr8Y=s64","userId":"01220749559162578477"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["# what are the unique values for age?\n","age_col = 'age'\n","patient[age_col].sort_values().unique()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25',\n","       '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36',\n","       '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47',\n","       '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58',\n","       '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69',\n","       '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80',\n","       '81', '82', '83', '84', '85', '86', '87', '88', '89', '> 89'],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Y_qJL94jE0k8"},"source":["- Try plotting a histogram of ages using the command in the cell below. What happens? Why?"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"1zad3Gr4D4LE","outputId":"029d54b3-0012-4e19-b50a-0bb92c207412","executionInfo":{"status":"error","timestamp":1566462614009,"user_tz":-120,"elapsed":571,"user":{"displayName":"Johannes Enevoldsen","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDT17vV6lYWp7H-9Zy9wEqJlQpp6fm8oZphMlhLr8Y=s64","userId":"01220749559162578477"}},"colab":{"base_uri":"https://localhost:8080/","height":313}},"source":["# try plotting a histogram of ages\n","patient[age_col].plot(kind='hist', bins=15)"],"execution_count":0,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-5af6821b55cb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpatient\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mage_col\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'hist'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, kind, ax, figsize, use_index, title, grid, legend, style, logx, logy, loglog, xticks, yticks, xlim, ylim, rot, fontsize, colormap, table, yerr, xerr, label, secondary_y, **kwds)\u001b[0m\n\u001b[1;32m   2740\u001b[0m                            \u001b[0mcolormap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolormap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myerr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0myerr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2741\u001b[0m                            \u001b[0mxerr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxerr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msecondary_y\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msecondary_y\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2742\u001b[0;31m                            **kwds)\n\u001b[0m\u001b[1;32m   2743\u001b[0m     \u001b[0m__call__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_series\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2744\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36mplot_series\u001b[0;34m(data, kind, ax, figsize, use_index, title, grid, legend, style, logx, logy, loglog, xticks, yticks, xlim, ylim, rot, fontsize, colormap, table, yerr, xerr, label, secondary_y, **kwds)\u001b[0m\n\u001b[1;32m   1996\u001b[0m                  \u001b[0myerr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0myerr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxerr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxerr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1997\u001b[0m                  \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msecondary_y\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msecondary_y\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1998\u001b[0;31m                  **kwds)\n\u001b[0m\u001b[1;32m   1999\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2000\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m_plot\u001b[0;34m(data, x, y, subplots, ax, kind, **kwds)\u001b[0m\n\u001b[1;32m   1799\u001b[0m         \u001b[0mplot_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubplots\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1800\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1801\u001b[0;31m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1802\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1803\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    247\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_args_adjust\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 249\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    250\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setup_subplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    251\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m_compute_plot_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_empty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m             raise TypeError('Empty {0!r}: no numeric data to '\n\u001b[0;32m--> 367\u001b[0;31m                             'plot'.format(numeric_data.__class__.__name__))\n\u001b[0m\u001b[1;32m    368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumeric_data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Empty 'DataFrame': no numeric data to plot"]}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"xIdwVEEPF25H"},"source":["Let's create a new column named `age_num`, then try again."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"-rwc-28oFF6R","outputId":"e1a57f14-a837-46a5-fab2-2479fcdff709","executionInfo":{"status":"ok","timestamp":1566462973056,"user_tz":-120,"elapsed":458,"user":{"displayName":"Johannes Enevoldsen","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDT17vV6lYWp7H-9Zy9wEqJlQpp6fm8oZphMlhLr8Y=s64","userId":"01220749559162578477"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["# create a column containing numerical ages\n","# If ‘coerce’, then invalid parsing will be set as NaN\n","agenum_col = 'age_num'\n","patient[agenum_col] = pd.to_numeric(patient[age_col], errors='coerce')\n","patient[agenum_col].sort_values().unique()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27., 28.,\n","       29., 30., 31., 32., 33., 34., 35., 36., 37., 38., 39., 40., 41.,\n","       42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 54.,\n","       55., 56., 57., 58., 59., 60., 61., 62., 63., 64., 65., 66., 67.,\n","       68., 69., 70., 71., 72., 73., 74., 75., 76., 77., 78., 79., 80.,\n","       81., 82., 83., 84., 85., 86., 87., 88., 89., nan])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"uTFMqqWqFMjG","outputId":"40a66ea9-621a-46d9-9567-4b4993b7af3f","executionInfo":{"status":"ok","timestamp":1566462974316,"user_tz":-120,"elapsed":561,"user":{"displayName":"Johannes Enevoldsen","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDT17vV6lYWp7H-9Zy9wEqJlQpp6fm8oZphMlhLr8Y=s64","userId":"01220749559162578477"}},"colab":{"base_uri":"https://localhost:8080/","height":286}},"source":["patient[agenum_col].plot(kind='hist', bins=15)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f8d9749a198>"]},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"FrbR8rV3GlR1"},"source":["## Questions\n","\n","- Use the `mean()` method to find the average age. Why do we expect this to be lower than the true mean?\n","- In the same way that you use `mean()`, you can use `describe()`, `max()`, and `min()`. Look at the admission heights (`admissionheight`) of patients in cm. What issue do you see? How can you deal with this issue?"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"TPps13DZG6Ac","outputId":"a0eaae12-057b-41f4-fc07-0554c5ef97bc","executionInfo":{"status":"ok","timestamp":1566462979530,"user_tz":-120,"elapsed":465,"user":{"displayName":"Johannes Enevoldsen","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDT17vV6lYWp7H-9Zy9wEqJlQpp6fm8oZphMlhLr8Y=s64","userId":"01220749559162578477"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["adheight_col = 'admissionheight'\n","patient[adheight_col].describe()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    1402.000000\n","mean      168.061591\n","std        13.442189\n","min         1.600000\n","25%       160.000000\n","50%       167.600000\n","75%       177.800000\n","max       297.180000\n","Name: admissionheight, dtype: float64"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"9jhV9xQoGRJq","colab":{}},"source":["# set threshold\n","adheight_col = 'admissionheight'\n","patient[patient[adheight_col] < 10] = None"],"execution_count":0,"outputs":[]}]}